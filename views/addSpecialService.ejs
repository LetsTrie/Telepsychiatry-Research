<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('./partials/vendorsTop')%>

    <link rel="stylesheet" href="/css/admin.css" />
    <title>Add New Research | Admin Panel</title>
  </head>

  <body>
    <section class="adminTest" style="min-height: 100vh; background: #ebebeb;">
      <header>
        <nav>
          <%- include('./partials/adminNavbar')%>
        </nav>
        <div class="blueDivider">
          <div class="smallText">
            <p><a href="#">Admin Panel</a> / Special Service</p>
          </div>
          <div class="bigText">
            <p>Add New Special Service</p>
          </div>
        </div>
      </header>
      <div class="twoBigSectionFlex">
        <div class="oneBigFatCat_wrapper">
          <div class="oneBigFatCat">
            <div class="addResource text-center my-2">
              <h1>Add Special Service</h1>
            </div>
            <div class="addResource_form">
              <div class="alert alert-danger text-center" id="alert"></div>
              <div
                class="alert alert-success text-center"
                id="alert-success"
                style="display: none;"
              ></div>
              <!-- autocomplete="off" is done to for the sake of autocomplete add doctor input -->
              <form
                autocomplete="off"
                action="/admin/new/specialService"
                id="form"
                enctype="multipart/form-data"
                method="POST"
              >
                <input type="hidden" name="filename" id="filename" />
                <input type="hidden" name="id" id="id" />

                <div class="one_box">
                  <div class="box_header">
                    <p>Title:</p>
                  </div>
                  <div class="input_box">
                    <input
                      type="text"
                      name="title"
                      id="title"
                      placeholder="Title"
                    />
                  </div>
                </div>
                <div class="one_box">
                  <div class="box_header">
                    <p>Breif Description:</p>
                  </div>
                  <div class="input_box">
                    <textarea name="BriefDesciption" id="BDeditor"> </textarea>
                  </div>
                </div>
                <div class="one_box">
                  <div class="box_header">
                    <p>Doctors:</p>
                  </div>
                  <input
                    type="number"
                    id="doctorCnt"
                    name="doctorCnt"
                    value="0"
                    style="display: none;"
                  />
                  <div class="keyContactPersonWrapper" id="doctor0">
                    <div class="keyContactPerson">
                      <div class="input_box_flx_prnt">
                        <div class="input_box_flx_chld">
                          <input id="doctorName0" type="text" name="doctorName" placeholder="Doctor name">
                        </div>'
                        <div class="input_box_flx_chld_btn">'
                          <button type="button" class="btn btn-danger" onclick="deleteDoc(this.parentElement.parentElement.parentElement.parentElement.id)">Delete</button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div id="doctorAddPlace"></div>
                  <button
                    type="button"
                    class="btn btn-secondary"
                    onclick="addDoctor()"
                  >
                    Add doctor
                  </button>
                </div>

                <div class="one_box">
                  <div class="box_header">
                    <p>Service Details:</p>
                  </div>
                  <div class="input_box">
                    <textarea name="ServiceDetails" id="SDeditor"> </textarea>
                  </div>
                </div>

                <div class="one_box">
                  <div class="box_header">
                    <p>Representational Photo</p>
                  </div>
                  <div class="input_box">
                    <input
                      type="file"
                      name="representPhoto"
                      id="repPhotoID"
                      accept="image/x-png,image/jpg,image/jpeg"
                    />
                  </div>
                </div>

                <div class="createResources__submit">
                  <button id="submit-btn">Submit</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>
    <%- include('./partials/footer')%>
  </body>
  <%- include('./partials/vendorsBottom')%>
  <script src="https://cdn.ckeditor.com/ckeditor5/15.0.0/classic/ckeditor.js"></script>
  <script
    src="https://code.jquery.com/jquery-3.4.1.js"
    integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU="
    crossorigin="anonymous"
  ></script>
  <script>
    let bdeditor, sdeditor;

    ClassicEditor.create(document.querySelector('#BDeditor'))
      .then((editor) => {
        bdeditor = editor;
        console.log(editor);
      })
      .catch((error) => {
        console.error(error);
      });

      // This is for service details
    ClassicEditor.create(document.querySelector('#SDeditor'))
      .then((editor) => {
        sdeditor = editor;
        console.log(editor);
      })
      .catch((error) => {
        console.error(error);
      });

    $('#submit-btn').click((e) => {
      e.preventDefault();
      const title = $('#title').val();
      const descriptionAbout = bdeditor.getData();
      const descriptionService = bdeditor.getData();
      const doctorCnt = $('#doctorCnt').val();
      const imageFile = $('#repPhotoID');

      if (check(title)) {
        showAlert('Enter the title');
      } else if (check(descriptionAbout)) {
        showAlert('Enter a brief description');
      } else if (check(descriptionService)) {
        showAlert('Enter service details');
      } else if (doctorCnt==0) {
        showAlert('Enter doctors for this service');
      }else if (!imageFile[0].files.length) {
        showAlert('Enter the representational photo');
      } else if ($('#repPhotoID')[0].files[0].size / 1024 > 250) {
        showAlert('File size must be less then 250 KB');
      } else {
        const file =
          Date.parse(new Date().toString()) +
          '-' +
          $('#repPhotoID')[0].files[0].name;
        $('#filename').val(file);
        const data = {
          title,
          descriptionAbout ,
          descriptionService ,
          doctorCnt ,
          file,
        };
        console.log(data);
        Submit(data);
      }
    });

    const check = (str) => {
      const res = str == '' || str == null || str == undefined;
      return res;
    };
    const showAlert = (msg) => {
      $('#alert').show();
      $('#alert').html(msg);
      $('html, body').animate(
        {
          scrollTop: 0,
        },
        'slow'
      );
    };
    const Submit = (data) => {
      $.ajax({
        type: 'POST',
        url: '/admin/new/specialService',
        data,
        success: (data) => {
          console.log(data);
          if (data.status) {
            $('#id').val(data.msg);
            $('#form').submit();
          }
        },
      });
    };

    function addDoctor(){
      let doctorNo = parseInt($('#doctorCnt').val())+1
      $('#doctorCnt').val(doctorNo)
      $('#doctorAddPlace').replaceWith(
        '<div class="keyContactPersonWrapper" id="doctor'+doctorNo+'">'+
          '<div class="keyContactPerson">'+
            '<div class="input_box_flx_prnt">'+
              '<div class="input_box_flx_chld">'+
                '<input id="doctorName'+doctorNo+'" type="text" name="doctorName" placeholder="Doctor name">'+
              '</div>'+
              '<div class="input_box_flx_chld_btn">'+
                '<button type="button" class="btn btn-danger" onclick="deleteDoc(this.parentElement.parentElement.parentElement.parentElement.id)">Delete</button>'+
              '</div>'+
            '</div>'+
          '</div>'+
        '</div>'+
        '<div id="doctorAddPlace"></div>'
      )
      autocomplete(document.getElementById("doctorName"+doctorNo), doctors);
    }
    function deleteDoc(id){
      let doctorNo = parseInt($('#doctorCnt').val())-1
      $('#doctorCnt').val(doctorNo)
      console.log('parent id='+id)
      $('#'+id+'').replaceWith('')
    }

    // next section is for auto complete doctor
    function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          /*close any already open lists of autocompleted values*/
          closeAllLists();
          if (!val) { return false;}
          currentFocus = -1;
          /*create a DIV element that will contain the items (values):*/
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          /*append the DIV element as a child of the autocomplete container:*/
          this.parentNode.appendChild(a);
          /*for each item in the array...*/
          for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              /*create a DIV element for each matching element:*/
              b = document.createElement("DIV");
              /*make the matching letters bold:*/
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              /*insert a input field that will hold the current array item's value:*/
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
                  /*insert the value for the autocomplete text field:*/
                  inp.value = this.getElementsByTagName("input")[0].value;
                  /*close the list of autocompleted values,
                  (or any other open lists of autocompleted values:*/
                  closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
              /*and simulate a click on the "active" item:*/
              if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }

    /*this doctors array is used in adding new doctor to service*/
    var doctors = <%-JSON.stringify(doctors)%>;
  </script>
</html>
